

Next Steps - 
		
*** Upload to live, play around with testing, and with ipad		
					
	Roles - remove canViewGroupList, any of the other group functions will need to see the list

	Group Pages
		- Build add group page
		- Build delete group page
		- build edit group page (including roles)
		- Build edit of group members	

	Users
		- Build user list page
		- build add user page
		- build delete user page
		- build edit user page
		- build group membership / role access page (? view role access and source in edit user page)
		- build administer custom profile fields page
		- update my profile page to include custom fields

	Company
		- Test that when module access is denied, any users or groups with role access within that module
		 loose that access - they should, the delete function is built into the sproc, just need to test it


	Overall
* add group tables, CRUD manager, group roles
* add user CRUD, users to groups, and group-user-role update
* include view user roles by group


*** Add version 3 improvement details to About page as built



****** Training Mode Thoughts ********

Only certain areas will be enabled for write/edit/delete in training mode.  check sheets, fuel entry, work order will be allowed
reports, asset/lists/ admin will be view only
will have tbCheckSheet_CheckSheetRecordsTRAINING tables for those areas where write is permitted, and worker will periodically clean
those tables


******* Publish Notes ************

*   right click eCheck3 project, select publish

* for DB, use EMSDataLocal, and EMSDataLive [Once this is working, delete EMSData on Local server, and EMSData_db on live]

****** General User Notes *******

* (ASPUsers.ID is a primary key - Use UserID rather than username as FK) - OK

To build labels for CRUD functionality that withstand updates, put the labels in the MetaData.cs, and link the 
model to the labels in PartialClasses.cs

To change a model, right click the model in the diagram, and go to update model from database.
  Add/remove tables, sprocs, views, etc from there

Go to controllers, right click, add new controller, MVC Scaffolded, same name as existing. 
 Just save any essential changes to controller or view prior to updating the scaffold

To change a stored procedure, delete it in the database
then delete it in the model, go to model view from the edmx file, and delete
the function imports and complex types.  Then re-add it in the database, and add
it to the model by updating from database 

Still need to include "Factory = 'System.ServiceModel.Activation.WebServiceHostFactory'" in WCF Service.svc file
To build a service add a WCF Service (not the AJAX enabled)

To Write to debug window
  System.Diagnostics.Debug.WriteLine("New ID: " + ext_tbCompany_Company.ID);
